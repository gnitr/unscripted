Optimisation:
    Observations:
        pactions is much slower when look at the iterations on screen, why?

        uwsgi --ini uwsgi.ini
        time pm utest any conn --cycles 10000
        # 0.5M / s: loop with just print
        # 3M / s  : > /dev/null 
        # 20M / s : without print 
        #
        # 410 / s : empty requests + print (runserver)
        # 483 / s : empty requests (runserver)
        # 550 / s : empty requests (uwsgi) (60% in client-side) => runserver speed varies a lot (300 to 900)
        # 1550 / s: request with PyCurl (80% in server-side) => triples the speed of the client
        # 1000 * 10 simulation reqs / 47s => 212 / s

    From top (algo/caching/avoidance) / from bottom (alternatives)
    
    django channels?
    
    80% of the time is spent on the server side (look at top during execution)
    socket
        better library?

    mongdb tuning?
    
    Single-thread?!
        we queue all requests on server side.
        - we can't parallelise the requests
        + dramatically simplifies the database: all objects are pythons and stay in memory
        + no need to worry about sharing, locking, race conditions, ...
        + no latency due to with python - db communications
        0 we must manage persistance
        - only feasible for small worlds
        - every Write HAS to go via the same instance
        - lacks all the nice database stuff like advanced queries, GUIs, libs...
            => can persists as MongoDB
    
    * multiprocess / multithread?
        runserver already has 4 workers!
        nginx?
    
    algo
        is_position_valid
        obstructing
    
    * in memory db:
        mongodb ramdisk 
        python objects shared in memory
            how do we keep them thread-safe?
        
    

python -m cProfile -o s2.cperf manage.py utest any pactions
pyprof2calltree -k -i s2.cperf

mind:
    implement basic NN for action selection
    with random units functions
visible:
    angle and distances to other things rather than positions
    hide creation date? show number of actions instead
perf:
    cache mongo
    separate client and server to different machines
test world:
    smaller
    die sooner?
collision bots/things:


! see in a range
! act in a narrower range

Phase 1

[DONE] Django project and apps skeletons
[DONE] Rewrite models with MongoDB bue to Thing inheritence and flexible schema
[DONE] Dummy models for
    . Thing
    . World
    . Bot
. Web api framework:
    [DONE] create a world        POST /worlds
    [DONE] list words            GET /worlds
    [DONE] remove a world        DEL /worlds/X
    [DONE] create a bot          POST /worlds/X/bots
    [DONE] things in a world     GET /worlds/X/things
    [DONE] move bot              POST /things/Y/actions/walk/X?angle=0.3
    [DONE] change parentid to objectid
    [DONE] use y has real height from ground 
. Crude visualisation
    [DONE] web page
    [DONE] get world data with web api
    . improve the low perf, 50% cpu on i7 for an empty map is prohibitive
    [DONE] very basic visualisation of bots on world map
    . camera:
        () add ability to move the camera (not just rotate and zoom)
        () rotate camera around itself
        [DONE] prevent camera to show reverse of ground
        . remember the last camera settings
        . follow bot mode
    [DONE] click on a bot
    . better colors for ground
    [DONE] better colors for bots
    [DONE] update the positions
() Command line tool that reflects Web API
    . ucore
    . create-POST, read-GET, update-PUT, rm-DELETE
[DONE] System for consistent IDs across the different layers:
    . Mongo doc._id (ObjectId) <-> Thing.pk (str) <-> api item.id (str)
. basic world engine
    [DONE] forward actions to targets
    . implement walk
    . make sure position is valid (not outside world boundary or colliding with something else)
. remote bot
    [DONE] simple command to execute action every x seconds
    [DONE] random walk
    . 
. release online
    . pb with domain config on web hosting side, site still links to godaddy
    

Thing
    pos
    dims
    type
    parent
    properties
        _private
        public
    
class Thing
    actionX
    _actionY
    
    